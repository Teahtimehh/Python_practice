import os
import json
from task_manager import TaskManager


def test_add_task():
    print("\n=== –¢–µ—Å—Ç: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á ===")
    manager = TaskManager()

    assert manager.add_task("–ó–∞–¥–∞—á–∞ 1") is True, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"
    assert manager.add_task("–ó–∞–¥–∞—á–∞ 2") is True, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä—É—é –∑–∞–¥–∞—á—É"

    assert len(manager.tasks) == 2, f"–û–∂–∏–¥–∞–ª–æ—Å—å 2 –∑–∞–¥–∞—á–∏, –ø–æ–ª—É—á–µ–Ω–æ {len(manager.tasks)}"

    assert manager.add_task("") is False, "–ü—É—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è"

    assert manager.add_task("–ó–∞–¥–∞—á–∞ 1") is False, "–î—É–±–ª–∏–∫–∞—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è"

    assert manager.tasks[0]["description"] == "–ó–∞–¥–∞—á–∞ 1", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
    assert manager.tasks[0]["completed"] is False, "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"

    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")


def test_complete_task():
    print("\n=== –¢–µ—Å—Ç: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á ===")
    manager = TaskManager()
    manager.add_task("–ó–∞–¥–∞—á–∞ 1")
    manager.add_task("–ó–∞–¥–∞—á–∞ 2")

    assert manager.complete_task(0) is True, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"
    assert manager.tasks[0]["completed"] is True, "–ó–∞–¥–∞—á–∞ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è"

    assert manager.complete_task(0) is False, "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False"

    assert manager.complete_task(10) is False, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False"

    assert manager.tasks[1]["completed"] is False, "–í—Ç–æ—Ä–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è"

    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")


def test_remove_task():
    print("\n=== –¢–µ—Å—Ç: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á ===")
    manager = TaskManager()
    manager.add_task("–ó–∞–¥–∞—á–∞ 1")
    manager.add_task("–ó–∞–¥–∞—á–∞ 2")
    manager.add_task("–ó–∞–¥–∞—á–∞ 3")

    assert manager.remove_task(1) is True, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
    assert len(manager.tasks) == 2, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è"
    assert manager.tasks[0]["description"] == "–ó–∞–¥–∞—á–∞ 1", "–ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è"
    assert manager.tasks[1]["description"] == "–ó–∞–¥–∞—á–∞ 3", "–¢—Ä–µ—Ç—å—è –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ —Å–º–µ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ –º–µ—Å—Ç–æ –≤—Ç–æ—Ä–æ–π"

    assert manager.remove_task(5) is False, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False"

    assert manager.remove_task(2) is False, "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É"

    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")


def test_save_and_load():
    print("\n=== –¢–µ—Å—Ç: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ ===")
    test_file = "test_tasks.json"
    manager = TaskManager()
    manager.add_task("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ 1")
    manager.add_task("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ 2")
    manager.complete_task(0)

    assert manager.save_to_json(test_file) is True, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
    assert os.path.exists(test_file), "–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω"

    new_manager = TaskManager()
    assert new_manager.load_from_json(test_file) is True, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"

    assert len(new_manager.tasks) == 2, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"
    assert new_manager.tasks[0]["description"] == "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ 1", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏"
    assert new_manager.tasks[0]["completed"] is True, "–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
    assert new_manager.tasks[1]["description"] == "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ 2", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏"
    assert new_manager.tasks[1]["completed"] is False, "–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"

    if os.path.exists(test_file):
        os.remove(test_file)

    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")


def test_boundary_conditions():
    print("\n=== –¢–µ—Å—Ç: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è ===")
    manager = TaskManager()

    assert manager.remove_task(0) is False, "–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False"
    assert manager.complete_task(0) is False, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False"
    manager.list_tasks()

    manager.add_task("–ó–∞–¥–∞—á–∞")
    assert manager.remove_task(-1) is False, "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False"
    assert manager.complete_task(-1) is False, "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False"

    assert manager.remove_task(1) is False, "–ò–Ω–¥–µ–∫—Å = –¥–ª–∏–Ω–µ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False"
    assert manager.complete_task(1) is False, "–ò–Ω–¥–µ–∫—Å = –¥–ª–∏–Ω–µ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False"

    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")


def run_tests():
    print("\n" + "=" * 50)
    print("–ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–• –¢–ï–°–¢–û–í".center(50))
    print("=" * 50)

    tests = [
        test_add_task,
        test_complete_task,
        test_remove_task,
        test_save_and_load,
        test_boundary_conditions
    ]

    failed_tests = []

    for test in tests:
        try:
            test()
            print(f"–¢–µ—Å—Ç '{test.__name__}' –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n")
        except AssertionError as e:
            print(f"‚ùå –¢–µ—Å—Ç '{test.__name__}' –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {e}\n")
            failed_tests.append(test.__name__)
        except Exception as e:
            print(f"üî• –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test.__name__}': {e}\n")
            failed_tests.append(test.__name__)

    print("\n" + "=" * 50)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø".center(50))
    print("=" * 50)

    if not failed_tests:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
    else:
        print(f"‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û –¢–ï–°–¢–û–í: {len(failed_tests)} –∏–∑ {len(tests)}")
        print("–°–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:")
        for name in failed_tests:
            print(f"  - {name}")

    print("=" * 50 + "\n")


if __name__ == "__main__":
    run_tests()